variables:
  SONAR_USER_HOME: '${CI_PROJECT_DIR}/.sonar'
  GIT_DEPTH: '0'

stages:
  - install
  - test
  - sonar
  - deploy

install_dependencies:
  stage: install
  image: node:20
  script:
    - echo "Installing dependencies"
    - npm ci
  cache:
    key: npm-cache
    paths:
      - node_modules/
  artifacts:
    paths:
      - node_modules/
  only:
    - merge_requests
    - main
    - dev
    - develop

run_typecheck:
  stage: test
  image: node:20
  dependencies:
    - install_dependencies
  cache:
    key: npm-cache
    paths:
      - node_modules/
  script:
    - echo "Running type checks"
    - npm run typecheck
  artifacts:
    paths:
      - node_modules/
  only:
    - merge_requests
    - main
    - dev
    - develop

run_lint:
  stage: test
  image: node:20
  dependencies:
    - run_typecheck
  cache:
    key: npm-cache
    paths:
      - node_modules/
  script:
    - echo "Running lint checks"
    - npm run lint
  artifacts:
    paths:
      - node_modules/
  only:
    - merge_requests
    - main
    - dev
    - develop

run_tests:
  stage: test
  image: node:20
  dependencies:
    - run_lint
  cache:
    key: npm-cache
    paths:
      - node_modules/
  script:
    - echo "Running tests"
    - npm test
  only:
    - merge_requests
    - main
    - dev
    - develop

sonarcloud_check:
  stage: sonar
  image:
    name: sonarsource/sonar-scanner-cli:latest
    entrypoint: [""]
  dependencies:
    - run_tests
  cache:
    key: sonar-cache
    paths:
      - .sonar/cache
  script:
    - echo "Running SonarCloud analysis"
    - sonar-scanner -Dsonar.projectKey=v1centebarros_mei-tdw-m1 -Dsonar.organization=v1centebarros-gitlab -Dproject.settings=sonar-project.properties
  only:
    - merge_requests
    - main
    - dev
    - develop

deploy_preview:
  stage: deploy
  image: node:20
  dependencies:
    - run_tests
  cache:
    key: npm-cache
    paths:
      - node_modules/
  script:
    - echo "Deploying to preview site"
    - npm install --global vercel
    - vercel pull --yes --environment=preview --token=$VERCEL_TOKEN
    - vercel build --token=$VERCEL_TOKEN
    - vercel deploy --prebuilt --token=$VERCEL_TOKEN
  only:
    - dev

deploy_production:
  stage: deploy
  image: node:20
  dependencies:
    - run_tests
  cache:
    key: npm-cache
    paths:
      - node_modules/
  script:
    - echo "Deploying to production"
    - npm install --global vercel
    - vercel pull --yes --environment=production --token=$VERCEL_TOKEN
    - vercel build --prod --token=$VERCEL_TOKEN
    - vercel deploy --prebuilt --prod --token=$VERCEL_TOKEN
  only:
    - main
